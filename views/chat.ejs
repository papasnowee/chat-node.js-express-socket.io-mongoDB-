<% layout('layout/page') -%>

<% block('title', "чат") -%>

<script src="/socket.io/socket.io.js"></script>

<div id="room">
    <ul></ul>
    <form>
        <input class="form-control" autocomplete="off" autofocus placeholder="Сообщение...">
    </form>
</div>

<script>
    var input = $('#room input');
    var ul = $('#room ul');
    var form = $('#room form');

    var socket = io.connect('', {
        'reconnection': false
    });  // адрес сервера, если ничего не указано, то текущий сервер. Тут произойдет событие коннект на клиенте, сервер слушает это событие и реагирует.
            // вторым аргументов идет объект опций-настроек
    socket
        .on('message', function (username, message) {
            printMessage(username + "> " + message);
        })
        .on('leave', function(username){
            printStatus(username + "вышел из чата");
        })
        .on('join', function (username) {
            printStatus(username + "вошел в чат");
        })
        .on('connect', function () {
            printStatus("соединение установлено");
            form.on('submit', sendMessage);  // назначаем обработчик на событие submit
            input.prop('disabled', false);
        })
        .on('disconnect', function () {
            printStatus("соединение потеряно");
            form.off('submit', sendMessage); // если не оффнуть, то обработчик назначится при реконнекте второй раз, и будут срабатывать уже два обработчика нра отсылку сообщений один с сообщением, другой с пустой строкой
            input.prop('disabled', true);
            setTimeout(reconnect, 500);
        })
        .on('logout', function () {
            location.href = "/"; // посе того, как посетитель вышел, его следуюет переинуть на главную страницу, что бы на экране не осталось истории чата
        })
        .on('error', function (reason) {
            if (reason == "handshake unauthorized") {
                printStatus("вы вышли из сайта");
            } else {
                setTimeout(function () {
                    socket.connect();
                }, 500);
            }
        });

    function sendMessage() {
        var text = input.val();
        socket.emit('message', text, function () {
            printMessage(text);
        });

        input.val('');
        return false;
    }

    function reconnect() {
        socket.once('connect_error', function () {
            setTimeout(reconnect, 500);
        });
        socket.connect();
    }

    function printStatus(status) {
        $('<li>').append($('<li>').text(status)).appendTo(ul);
    }

    function printMessage(text) {
        $('<li>').text(text).appendTo(ul);
    }

</script>